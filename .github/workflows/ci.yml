name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Install backend dependencies
      working-directory: ./server
      run: npm ci

    - name: Run linting
      working-directory: ./server
      run: npm run lint

    - name: Wait for MongoDB
      run: |
        echo "Waiting for MongoDB to be ready..."
        timeout 30 bash -c 'until mongosh --eval "db.runCommand({ping: 1})" > /dev/null 2>&1; do sleep 1; done'

    - name: Seed test database
      working-directory: ./server
      run: npm run seed:test
      env:
        MONGO_URI_TEST: mongodb://localhost:27017/rewear-test
        JWT_SECRET: test-jwt-secret-key-for-ci
        NODE_ENV: test

    - name: Run backend tests
      working-directory: ./server
      run: npm test -- --coverage
      env:
        MONGO_URI_TEST: mongodb://localhost:27017/rewear-test
        JWT_SECRET: test-jwt-secret-key-for-ci
        NODE_ENV: test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./server/coverage/lcov.info
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci

    - name: Run frontend linting
      working-directory: ./client
      run: npm run lint

    - name: Build frontend
      working-directory: ./client
      run: npm run build

    - name: Run frontend tests
      working-directory: ./client
      run: npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./client/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  postman-tests:
    runs-on: ubuntu-latest
    needs: [test-backend]
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Install Newman
      run: npm install -g newman

    - name: Install backend dependencies
      working-directory: ./server
      run: npm ci

    - name: Seed test database
      working-directory: ./server
      run: npm run seed:test
      env:
        MONGO_URI_TEST: mongodb://localhost:27017/rewear-test
        JWT_SECRET: test-jwt-secret-key-for-ci
        NODE_ENV: test

    - name: Start backend server
      working-directory: ./server
      run: npm start &
      env:
        MONGO_URI: mongodb://localhost:27017/rewear-test
        JWT_SECRET: test-jwt-secret-key-for-ci
        NODE_ENV: test
        PORT: 5001

    - name: Wait for server to start
      run: |
        echo "Waiting for server to start..."
        timeout 30 bash -c 'until curl -f http://localhost:5001/; do sleep 1; done'

    - name: Run Postman tests
      run: newman run ReWear.postman_collection.json --environment postman-test-env.json --reporters cli,json --reporter-json-export postman-results.json
      continue-on-error: true

    - name: Upload Postman test results
      uses: actions/upload-artifact@v4
      with:
        name: postman-results
        path: postman-results.json

  security-scan:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  deployment-ready:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, postman-tests, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create deployment artifact
      run: |
        tar -czf rewear-deployment.tar.gz \
          --exclude='node_modules' \
          --exclude='.git' \
          --exclude='*.log' \
          --exclude='coverage' \
          .

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v4
      with:
        name: rewear-deployment
        path: rewear-deployment.tar.gz
        retention-days: 30

    - name: Deployment notification
      run: |
        echo "ðŸš€ Deployment artifact created successfully!"
        echo "âœ… All tests passed"
        echo "ðŸ”’ Security scan completed"
        echo "ðŸ“¦ Ready for production deployment"
