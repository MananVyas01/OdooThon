name: Data Refresh

on:
  pull_request:
    types: [labeled]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to refresh'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging

jobs:
  seed-validation:
    runs-on: ubuntu-latest
    if: contains(github.event.label.name, 'data-refresh') || github.event_name == 'workflow_dispatch'
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Install dependencies
      working-directory: ./server
      run: npm ci

    - name: Wait for MongoDB
      run: |
        echo "Waiting for MongoDB to be ready..."
        timeout 30 bash -c 'until mongosh --eval "db.runCommand({ping: 1})" > /dev/null 2>&1; do sleep 1; done'

    - name: Validate seed data structure
      working-directory: ./server
      run: |
        echo "🔍 Validating seed data structure..."
        node -e "
          const seedDatabase = require('./seeds/seed.js');
          console.log('✅ Seed script loaded successfully');
          console.log('🔍 Checking required exports...');
          if (typeof seedDatabase === 'function') {
            console.log('✅ Seed function export found');
          } else {
            console.error('❌ Seed function not properly exported');
            process.exit(1);
          }
        "

    - name: Test seed execution
      working-directory: ./server
      run: npm run seed:test
      env:
        MONGO_URI_TEST: mongodb://localhost:27017/rewear-seed-test
        JWT_SECRET: test-jwt-secret-key-for-seeding
        NODE_ENV: test

    - name: Verify seeded data
      working-directory: ./server
      run: |
        echo "🔍 Verifying seeded data..."
        node -e "
          const mongoose = require('mongoose');
          const User = require('./models/User');
          const Item = require('./models/Item');
          const SwapRequest = require('./models/SwapRequest');
          
          async function verifyData() {
            await mongoose.connect('mongodb://localhost:27017/rewear-seed-test');
            
            const userCount = await User.countDocuments();
            const itemCount = await Item.countDocuments();
            const swapCount = await SwapRequest.countDocuments();
            
            console.log(\`👥 Users: \${userCount}\`);
            console.log(\`📦 Items: \${itemCount}\`);
            console.log(\`🔄 Swaps: \${swapCount}\`);
            
            if (userCount < 5) {
              console.error('❌ Insufficient users seeded');
              process.exit(1);
            }
            
            if (itemCount < 12) {
              console.error('❌ Insufficient items seeded');
              process.exit(1);
            }
            
            if (swapCount < 4) {
              console.error('❌ Insufficient swaps seeded');
              process.exit(1);
            }
            
            console.log('✅ Data validation successful');
            await mongoose.connection.close();
          }
          
          verifyData().catch(console.error);
        "

    - name: Test database reset
      working-directory: ./server
      run: npm run seed:reset
      env:
        MONGO_URI_TEST: mongodb://localhost:27017/rewear-reset-test
        JWT_SECRET: test-jwt-secret-key-for-reset
        NODE_ENV: test

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('🌱 Data Refresh Validation')
          );
          
          const body = `## 🌱 Data Refresh Validation Results
          
          ✅ **Seed script validation:** PASSED
          ✅ **Data structure verification:** PASSED  
          ✅ **Database reset functionality:** PASSED
          
          ### Summary
          - 👥 **Users:** 5 accounts created
          - 📦 **Items:** 12 items with diverse categories
          - 🔄 **Swaps:** 4 swap requests (2 completed, 2 pending)
          
          ### Test Credentials
          - **Admin:** admin@rewear.com / admin123
          - **Manager:** manan@rewear.com / manan123
          - **User:** shrey@rewear.com / shrey123
          - **User:** malhar@rewear.com / malhar123
          - **User:** om@rewear.com / om123
          
          Ready for data refresh! 🚀`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
